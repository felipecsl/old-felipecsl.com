#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var url = require('url');

var optimist = require('optimist');

try {
    jade = require('../lib/jade');
} catch(err) {
    jade = require('jade');
}


var html2jade;
try {
    html2jade = require('html2jade');
} catch(err) {
    html2jade = require('../lib/html2jade');
}

function convert(input, output, options) {
    if (input) {
        try {
            var errors = html2jade.convert(input, output, options);
            if (errors) {
                console.error('parser errors: ' + errors);
            }
        } catch (err) {
            console.error(err);
        }
    } else {
        console.error('invalid input: ' + input);
    }
}

var options = {};
var argv = require('optimist').boolean('scalate').argv;

if (argv.scalate) {
  options.scalate = true;
}

argv._.forEach(function(arg) {
    if (!arg) {
        // do nothing
    } else if (url.parse(arg).protocol) {
        // HACK: wonky URL detection
        convert(arg);
    } else {
        // path or glob
        if (arg.substring(0, 2) === '~/') {
            arg = path.join(process.env['HOME'], arg.substring(2));
        } else if (arg[0] !== '/') {
            arg = path.join(process.cwd(), arg);
        }
        if (path.existsSync(arg)) {
            var stats = fs.statSync(arg);
            if (stats.isFile()) {
                var outpath = path.join(path.dirname(arg), path.basename(arg, path.extname(arg)) + '.jade');
                var outstrm = fs.createWriteStream(outpath, {
                    flags: 'w',
                    encoding: 'utf8',
                });
                //console.log('converting: ' + arg);
                convert(arg, new html2jade.StreamOutput(outstrm), options);
            }
        }
    }
});
